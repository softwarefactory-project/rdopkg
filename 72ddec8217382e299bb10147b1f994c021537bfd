{
  "comments": [
    {
      "key": {
        "uuid": "9f7372fe_9b557a58",
        "filename": "rdopkg/actions/reqs/actions.py",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 201
      },
      "writtenOn": "2019-10-22T16:12:51Z",
      "side": 1,
      "message": "as a follow up we might need to allow exceptions, returning structured output (json?) with package version details",
      "revId": "72ddec8217382e299bb10147b1f994c021537bfd",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9ea5d28_560c7c63",
        "filename": "rdopkg/actions/reqs/actions.py",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 267
      },
      "writtenOn": "2019-10-22T17:44:06Z",
      "side": 1,
      "message": "We have mismatch versions in all packages because requirements.txt usually has banned versions as:\n\n  python-babel !\u003d 2.4.0,\u003e\u003d 2.3.4  (\u003e\u003d 2.3.4 in .spec)\n  python-oslo-serialization !\u003d 2.19.1,\u003e\u003d 2.18.0  (\u003e\u003d 2.18.0 in .spec)\n\nSo, i think using rc for mismatch will not be very useful. anyway, as it\u0027s using different rc code we can specifically look for exit code \u003d\u003d 2.",
      "parentUuid": "9f7372fe_9b557a58",
      "revId": "72ddec8217382e299bb10147b1f994c021537bfd",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "631f2b4f_1937d0ee",
        "filename": "rdopkg/actions/reqs/actions.py",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 166
      },
      "writtenOn": "2019-10-23T15:03:17Z",
      "side": 1,
      "message": "Good point, maybe worth disabling by default unless we pass a switch to the CLI (maybe --strict ?)",
      "parentUuid": "c9ea5d28_560c7c63",
      "revId": "72ddec8217382e299bb10147b1f994c021537bfd",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8207be81_6ba6d0ed",
        "filename": "rdopkg/actions/reqs/actions.py",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 68
      },
      "writtenOn": "2019-10-31T11:13:18Z",
      "side": 1,
      "message": "\u003e We have mismatch versions in all packages because requirements.txt\n \u003e usually has banned versions as:\n \u003e \n \u003e python-babel !\u003d 2.4.0,\u003e\u003d 2.3.4  (\u003e\u003d 2.3.4 in .spec)\n \u003e python-oslo-serialization !\u003d 2.19.1,\u003e\u003d 2.18.0  (\u003e\u003d 2.18.0 in .spec)\n \u003e \n \u003e So, i think using rc for mismatch will not be very useful. anyway,\n \u003e as it\u0027s using different rc code we can specifically look for exit\n \u003e code \u003d\u003d 2.\n\nDo RPM specs support banning versions of dependencies at all? I couldn\u0027t find any mention of this anywhere. If it\u0027s not supported, should we have a warning, or add a specific output that lists unsupported dependency versions?",
      "parentUuid": "c9ea5d28_560c7c63",
      "revId": "72ddec8217382e299bb10147b1f994c021537bfd",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a63362ae_2f66b8cf",
        "filename": "rdopkg/actions/reqs/actions.py",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 68
      },
      "writtenOn": "2019-10-31T11:13:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "631f2b4f_1937d0ee",
      "revId": "72ddec8217382e299bb10147b1f994c021537bfd",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8eaa248e_5aa2e373",
        "filename": "rdopkg/exception.py",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 200
      },
      "writtenOn": "2019-11-12T16:33:19Z",
      "side": 1,
      "message": "If I understood it correctly, this line will not do anything, because the constructor for RdopkgException will take the exit_code provided to the exception. Then why this?",
      "range": {
        "startLine": 20,
        "startChar": 4,
        "endLine": 20,
        "endChar": 17
      },
      "revId": "72ddec8217382e299bb10147b1f994c021537bfd",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6133cc7f_446c24d6",
        "filename": "rdopkg/exception.py",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 609
      },
      "writtenOn": "2019-11-12T16:54:13Z",
      "side": 1,
      "message": "Indeed, I put both the exit_code and msg_fmt in new classes to address mismatch and missing dependencies in change 3.",
      "parentUuid": "8eaa248e_5aa2e373",
      "range": {
        "startLine": 20,
        "startChar": 4,
        "endLine": 20,
        "endChar": 17
      },
      "revId": "72ddec8217382e299bb10147b1f994c021537bfd",
      "serverId": "6c1dc8ef-8b94-40e4-bd83-c2359d45ecc0",
      "unresolved": false
    }
  ]
}